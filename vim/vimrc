" Note: default <leader> is usually \
let mapleader = "\\"

set tabstop=4
set shiftwidth=4
set laststatus=2
set backupdir=/tmp//
set directory=/tmp//
set undodir=/tmp//
set keywordprg=rg
set mouse=
set expandtab
set hidden
set number
set autoindent
set showmode
set showcmd
set hlsearch
set incsearch
set ruler
set cursorline
set cursorcolumn
set nowrap
set listchars=space:·,tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:·,eol:$
set smartcase
set foldmethod=manual
set foldnestmax=1
set tags=./tags,tags  " look for the tags file in current directory, then globally

" Statusline
set statusline=
set statusline+=[%n]\                                  "buffernr
set statusline+=%<%F\                                  "File+path
set statusline+=%m%r%w\                                "Modified? Readonly? 
set statusline+=%=%y\                                    "FileType
set statusline+=%{''.(&fenc!=''?&fenc:&enc).''}        "Encoding
set statusline+=%{(&bomb?\",BOM\":\"\")}\              "Encoding2
set statusline+=%{&ff}\                                "FileFormat (dos/unix..) 
set statusline+=r:%l/%L\                               "Rownumber/total (%)
set statusline+=c:%c\                                  "Colnr
set statusline+=%P\                                    "Top/bot.

"
" Plugins
"
" To install vim-plug:
"
"  curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
"   https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"
" Then call :PlugInstall to install the plugins.
call plug#begin('~/.vim/plugged')
  " Color Highlighter
  Plug 'chrisbra/Colorizer'

  " fuzzyfinder
  Plug '~/opt/fzf'  " path to fzf
  Plug 'junegunn/fzf.vim'

  " Python syntax highlight
  Plug 'vim-python/python-syntax'

  " Colorschemes
  Plug 'BarretRen/vim-colorscheme'
  
  " NERD Commenter
  Plug 'scrooloose/nerdcommenter'

  " Rename buffers (and its file) on the fly
  Plug 'danro/rename.vim'
call plug#end()

runtime macros/matchit.vim

filetype plugin on
filetype plugin indent on

syntax enable

colorscheme monokai

" Status line colors
hi StatusLine ctermbg=147 ctermfg=0
hi StatusLineNC ctermbg=18 ctermfg=15

" auto reload files on change
set autoread
au CursorHold,CursorHoldI * checktime

" remove netrw directory banner
let g:netrw_banner = 0

" (Plugin Python syntax) 
let g:python_highlight_all = 1

" (Plugin FZF) Disable jumping to existing windows
let g:fzf_buffers_jump = 0

" Cursor column/line highlight
:hi CursorLine   cterm=NONE ctermbg=0 
:hi CursorColumn cterm=NONE ctermbg=0


"""""""""""""""""""""""""""""""""""
"           Functions
"

function EnableCursorHighlight()
   setlocal cursorline
   setlocal cursorcolumn
endfunction
function DisableCursorHighlight()
   setlocal nocursorline
   setlocal nocursorcolumn
endfunction
augroup CursorLine
  au!
  au VimEnter,WinEnter,BufWinEnter * call EnableCursorHighlight()
  au WinLeave * call DisableCursorHighlight()
augroup END

" Show git diff of current file
function GitDiff()
    :silent execute '!git diff --color=always -- ' . expand('%:p') . ' | less --RAW-CONTROL-CHARS'
    :redraw!
endfunction

function CheckRo()
    if &readonly
        colorscheme moria
    else
        colorscheme monokai
    endif
endfunction

" Returns char under cursor
function GetCurrentChar()
    return strcharpart(strpart(getline('.'), col('.') - 1), 0, 1)
endfunction

" Toggle fold column
function ToggleFoldColumn()
    if (&foldcolumn != 0)
        set foldcolumn=0
    else
        set foldcolumn=2
    endif
endfunction

" Toggles between manual and syntax folding
function ToggleFoldMethod()
	if (&foldmethod == 'manual')
		setlocal foldmethod=syntax
		echo 'foldmethod=syntax'
	else
		setlocal foldmethod=manual
		echo 'foldmethod=manual'
	endif
endfunction

" Save current session based on current dir
function! SaveSession()
  let b:sessiondir = $HOME . "/.vim/sessions" . getcwd()
  if (filewritable(b:sessiondir) != 2)
    exe 'silent !mkdir -p ' b:sessiondir
    redraw!
  endif
  let b:filename = b:sessiondir . '/session.vim'
  exe "mksession! " . b:filename
endfunction
" Load session based on current dir
function! LoadSession()
  let b:sessiondir = $HOME . "/.vim/sessions" . getcwd()
  let b:sessionfile = b:sessiondir . "/session.vim"
  if (filereadable(b:sessionfile))
    exe 'source ' b:sessionfile
  else
    echo "No session loaded."
  endif
endfunction

" Compatible with ranger 1.4.2 through 1.7.*
"
" Add ranger as a file chooser in vim
"
" If you add this code to the .vimrc, ranger can be started using the command
" ":RangerChooser" or the keybinding "<leader>r".  Once you select one or more
" files, press enter and ranger will quit again and vim will open the selected
" files.
function! RangeChooser()
    let temp = tempname()
    " The option "--choosefiles" was added in ranger 1.5.1. Use the next line
    " with ranger 1.4.2 through 1.5.0 instead.
    "exec 'silent !ranger --choosefile=' . shellescape(temp)
    if has("gui_running")
        exec 'silent !xterm -e ranger --choosefiles=' . shellescape(temp)
    else
        exec 'silent !ranger --choosefiles=' . shellescape(temp)
    endif
    if !filereadable(temp)
        redraw!
        " Nothing to read.
        return
    endif
    let names = readfile(temp)
    if empty(names)
        redraw!
        " Nothing to open.
        return
    endif
    " Edit the first item.
    exec 'edit ' . fnameescape(names[0])
    " Add any remaning items to the arg list/buffer list.
    for name in names[1:]
        exec 'argadd ' . fnameescape(name)
    endfor
    redraw!
endfunction
command! -bar RangerChooser call RangeChooser()

" See https://vim.fandom.com/wiki/Make_search_results_appear_in_the_middle_of_the_screen
function s:SearchMode()
  if !exists('s:searchmode') || s:searchmode == 0
    echo 'Search next: scroll hit to middle if not on same page'
    nnoremap <silent> n n:call <SID>MaybeMiddle()<CR>
    nnoremap <silent> N N:call <SID>MaybeMiddle()<CR>
    let s:searchmode = 1
  elseif s:searchmode == 1
    echo 'Search next: scroll hit to middle'
    nnoremap n nzz
    nnoremap N Nzz
    let s:searchmode = 2
  else
    echo 'Search next: normal'
    nunmap n
    nunmap N
    let s:searchmode = 0
  endif
endfunction

" If cursor is in first or last line of window, scroll to middle line.
function s:MaybeMiddle()
  if winline() == 1 || winline() == winheight(0)
    normal! zz
  endif
endfunction


" Display an error message.
function! s:Warn(msg)
  echohl ErrorMsg
  echomsg a:msg
  echohl NONE
endfunction


"""""""""""""""""""""""""""""""""""
"           Auto commands
"

" Delete buffer while keeping window layout (don't close buffer's windows).
" Version 2008-11-18 from http://vim.wikia.com/wiki/VimTip165
if v:version < 700 || exists('loaded_bclose') || &cp
  finish
endif
let loaded_bclose = 1
if !exists('bclose_multiple')
  let bclose_multiple = 1
endif

augroup AutoSaveFolds
  autocmd!
  autocmd BufWinLeave ?* mkview
  autocmd BufWinEnter ?* silent loadview
augroup END

" Uncomment the following to have Vim jump to the last position when                                                       
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif


"""""""""""""""""""""""""""""""""""
"           Mappings
"

"""
" Leader
nmap <silent> <Leader>w :set wrap!<CR>
" Git Diff
nmap <silent> <leader>gd :call GitDiff()<CR>
" Python PDB
nmap <silent> <leader>pdb iimport pdb; pdb.set_trace()<ESC>
" Python __main__
nmap <silent> <leader>main iif __name__ == "__main__":<CR>main()<ESC>
" Linters
nmap <silent> <leader>phpl :!php -l %:p<CR>
nmap <silent> <leader>pylint :!pylint %:p<CR>
nmap <silent> <leader>flake8 :!flake8 %:p<CR>
nmap <silent> <leader>pep8 :!pep8 %:p<CR>
" Cursor to the end of last operated text or end of putted text
nmap <silent> <leader>l `[
" Deleting
nmap <silent> <leader>d :echo Getchar()<CR>
" Folding
nmap <silent> <leader>f :call ToggleFoldColumn()<CR>


" Clear highlight
nmap <silent> <F1> :noh<CR>
" Switch to last buffer visited
nmap <silent> <F2> :b!#<CR>
" Switch to previous buffer
nmap <silent> <F3> :bprevious<CR>
" Switch to next buffer
nmap <silent> <F4> :bnext<CR>
" Print full path of current file
nmap <silent> <F5> :echo expand('%:p')<CR>
" Folding
nmap <silent> <C-m> za
" Toggle line wrapping
nmap <silent> <F11> :call ToggleFoldMethod()<CR>
" FuzzyFinder
nmap <C-b> :Buffers<CR>
nmap <C-n> :Files<CR>
nmap <C-f> :Lines<CR>
nmap <C-g> :BLines<CR>
nmap <C-t> :Tags<CR>
" Saving & Exitting
nmap <C-p> :w<CR>
" Scrolling
nmap <silent> <C-j> <C-e><C-e>
nmap <silent> <C-k> <C-y><C-y>
nmap <silent> <F6> zh
nmap <silent> <F7> zl
" Copy-paste
nmap <silent> <F9> "+yy
vmap <silent> <F9> "+y
nmap <silent> <F10> "+P
vmap <silent> <F10> "+P
" Select pasted text. See https://vim.fandom.com/wiki/Selecting_your_pasted_text
nnoremap <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'
" See https://vim.fandom.com/wiki/Move_cursor_by_display_lines_when_wrapping
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
