" Note: default <leader> is usually \
let mapleader = "\\"

set tabstop=4
set shiftwidth=4
set laststatus=2
set backupdir=/tmp//
set directory=/tmp//
set undodir=/tmp//
set keywordprg=rg
set mouse=
set expandtab
set hidden
set number
set autoindent
set showmode
set showcmd
set hlsearch
set incsearch
set ruler
set cursorline
set cursorcolumn
set nowrap
set listchars=space:·,tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:·,eol:$
set ignorecase
set smartcase
set foldmethod=manual
set foldnestmax=1
set splitright
set splitbelow
set vb t_vb=     " no visual bell & flash
set tags=./tags,tags  " look for the tags file in current directory, then globally

" Statusline
set statusline=
set statusline+=[%n]\                                  "buffernr
set statusline+=%<%F\                                  "File+path
set statusline+=%m%r%w\                                "Modified? Readonly? 
set statusline+=%=%y\                                    "FileType
set statusline+=%{''.(&fenc!=''?&fenc:&enc).''}        "Encoding
set statusline+=%{(&bomb?\",BOM\":\"\")}\              "Encoding2
set statusline+=%{&ff}\                                "FileFormat (dos/unix..) 
set statusline+=r:%l/%L\                               "Rownumber/total (%)
set statusline+=c:%c\                                  "Colnr
set statusline+=%P\                                    "Top/bot.

"
" Plugins
"
" To install vim-plug:
"
"  curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
"   https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"
" Then call :PlugInstall to install the plugins.
call plug#begin('~/.vim/plugged')
  Plug '~/opt/fzf'  " path to fzf
  Plug 'junegunn/fzf.vim'
  Plug 'vim-python/python-syntax'
  Plug 'yuriescl/vim-colorscheme'
  Plug 'scrooloose/nerdcommenter'
  Plug 'danro/rename.vim'
  Plug 'qpkorr/vim-bufkill'
  Plug 'altercation/vim-colors-solarized'
  Plug 'alvan/vim-closetag'
  Plug 'mattn/emmet-vim'
  Plug 'xolox/vim-misc'
  Plug 'xolox/vim-session'
  Plug 'majutsushi/tagbar'
call plug#end()

runtime macros/matchit.vim

filetype plugin on
filetype plugin indent on

syntax enable

colorscheme monokai

" Status line colors
hi StatusLine ctermbg=147 ctermfg=0
hi StatusLineNC ctermbg=18 ctermfg=15

" remove netrw directory banner
let g:netrw_banner = 0

" (Plugin Python syntax) 
let g:python_highlight_all = 1

" (Plugin FZF) Disable jumping to existing windows
let g:fzf_buffers_jump = 0

" Disable automatic session saving
let g:session_autosave = 'no'

" (Plugin Emmet)
let g:user_emmet_mode='i' " Enable only in insert mode
let g:user_emmet_install_global = 0 " Enable just for html/css files

" (Plugin vim-closetag) Shortcut for closing tags, default is '>'
let g:closetag_shortcut = '<leader>>'

autocmd FileType html,css EmmetInstall

" Cursor column/line highlight
:hi CursorLine   cterm=NONE ctermbg=0 
:hi CursorColumn cterm=NONE ctermbg=0


"""""""""""""""""""""""""""""""""""
"           Functions
"

function EnableCursorHighlight()
   setlocal cursorline
   setlocal cursorcolumn
endfunction
function DisableCursorHighlight()
   setlocal nocursorline
   setlocal nocursorcolumn
endfunction
augroup CursorLine
  au!
  au VimEnter,WinEnter,BufWinEnter * call EnableCursorHighlight()
  au WinLeave * call DisableCursorHighlight()
augroup END

" Show git diff of current file
function GitDiff()
    :silent execute '!git diff --color=always -- ' . expand('%:p') . ' | less --RAW-CONTROL-CHARS'
    :redraw!
endfunction
function GitDiffStaged()
    :silent execute '!git diff --staged --color=always -- ' . expand('%:p') . ' | less --RAW-CONTROL-CHARS'
    :redraw!
endfunction

" Toggle fold column
function ToggleFoldColumn()
    if (&foldcolumn != 0)
        set foldcolumn=0
    else
        set foldcolumn=2
    endif
endfunction

" Toggles between manual and syntax folding
function ToggleFoldMethod()
	if (&foldmethod == 'manual')
		setlocal foldmethod=syntax
		echo 'foldmethod=syntax'
	else
		setlocal foldmethod=manual
		echo 'foldmethod=manual'
	endif
endfunction

" See https://vim.fandom.com/wiki/Make_search_results_appear_in_the_middle_of_the_screen
function s:SearchMode()
  if !exists('s:searchmode') || s:searchmode == 0
    echo 'Search next: scroll hit to middle if not on same page'
    nnoremap <silent> n n:call <SID>MaybeMiddle()<CR>
    nnoremap <silent> N N:call <SID>MaybeMiddle()<CR>
    let s:searchmode = 1
  elseif s:searchmode == 1
    echo 'Search next: scroll hit to middle'
    nnoremap n nzz
    nnoremap N Nzz
    let s:searchmode = 2
  else
    echo 'Search next: normal'
    nunmap n
    nunmap N
    let s:searchmode = 0
  endif
endfunction
" If cursor is in first or last line of window, scroll to middle line.
function s:MaybeMiddle()
  if winline() == 1 || winline() == winheight(0)
    normal! zz
  endif
endfunction

" Compatible with ranger 1.4.2 through 1.7.*
"
" Add ranger as a file chooser in vim.
" Starts in the current file's directory.
" Usage: :RangerChooser
function! RangerChooser()
    let temp = tempname()
    " The option "--choosefiles" was added in ranger 1.5.1. Use the next line
    " with ranger 1.4.2 through 1.5.0 instead.
    "exec 'silent !ranger --choosefile=' . shellescape(temp)
    if has("gui_running")
        exec 'silent !xterm -e ranger --choosefiles=' . shellescape(temp) . ' ' . expand('%:p:h')
    else
        exec 'silent !ranger --choosefiles=' . shellescape(temp) . ' ' . expand('%:p:h') 
    endif
    if !filereadable(temp)
        redraw!
        " Nothing to read.
        return
    endif
    let names = readfile(temp)
    if empty(names)
        redraw!
        " Nothing to open.
        return
    endif
    " Edit the first item.
    exec 'edit ' . fnameescape(names[0])
    " Add any remaning items to the arg list/buffer list.
    for name in names[1:]
        exec 'argadd ' . fnameescape(name)
    endfor
    redraw!
endfunction
command! -bar RangerChooser call RangerChooser()

"""""""""""""""""""""""""""""""""""
"           Auto commands
"

augroup AutoSaveFolds
  autocmd!
  autocmd BufWinLeave ?* mkview
  autocmd BufWinEnter ?* silent loadview
augroup END

" Uncomment the following to have Vim jump to the last position when                                                       
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif


"""""""""""""""""""""""""""""""""""
"           Mappings
"

" Clear highlight
nmap <silent> <F1> :noh<CR>
" Switch to last buffer visited
nmap <silent> <F2> :b#<CR>
" Toggle wrap
nmap <silent> <F3> :set wrap!<CR>
" (Plugin bufkill) Delete current buffer without losing window/split
nmap <silent> <F4> :BD<CR>
" Echo full path of current file's directory
nmap <F5> :echo expand('%:p:h')<CR>
" Echo full path of current file
nmap <F6> :echo expand('%:p')<CR>
" Tabs
nmap <silent> <C-k> :tabprevious<CR>
nmap <silent> <C-j> :tabnext<CR>
" Folding
nmap <silent> <C-m> za
" FuzzyFinder
nmap <C-b> :Buffers<CR>
nmap <C-n> :Files<CR>
nmap <C-f> :Lines<CR>
nmap <C-t> :Tags<CR>
nmap <C-g> :History<CR>
" Saving & Exitting
nmap <C-p> :w<CR>
nmap <silent> <F7> zh
nmap <silent> <F8> zl
" Copy-paste
nmap <silent> <F9> "+yy
vmap <silent> <F9> "+y
nmap <silent> <F10> "+P
vmap <silent> <F10> "+P
" See https://vim.fandom.com/wiki/Move_cursor_by_display_lines_when_wrapping
nnoremap j gj
vnoremap j gj
nnoremap k gk
vnoremap k gk
" See https://vim.fandom.com/wiki/Selecting_your_pasted_text
nnoremap <expr> gp "'[" . strpart(getregtype(), 0, 1) . "']"
nnoremap <expr> gP "`[" . strpart(getregtype(), 0, 1) . "`]"
" Switch between search modes
nnoremap <silent> <leader>n :call <SID>SearchMode()<CR>
