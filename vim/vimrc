" Note: default <leader> is usually \
let mapleader = "\\"

set tabstop=4
set shiftwidth=4
set laststatus=2
set keywordprg=rg
set backupdir=/tmp//
set directory=/tmp//
set undodir=/tmp//
set nocompatible
set mouse=
set expandtab
set hidden
set number
set autoindent
set nosmartindent
set nocindent
set showmode
set showcmd
set hlsearch
set incsearch
set ruler
set cursorline
set nowrap
set lcs=extends:›,precedes:‹
set list
set ignorecase
set smartcase
set foldmethod=manual
set foldnestmax=1
set splitright
set splitbelow
set vb t_vb=     " no visual bell & flash
set tags=./tags,tags  " look for the tags file in current directory, then globally
set updatetime=750
set wildmode=longest,list

"
" Plugins
"
" To install vim-plug:
"
"  curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
"   https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"
" Then call :PlugInstall to install the plugins.
call plug#begin('~/.vim/plugged')
  Plug '~/opt/fzf'  " path to fzf
  Plug 'junegunn/fzf.vim'
  Plug 'vim-python/python-syntax'
  Plug 'yuriescl/vim-colorscheme'
  Plug 'danro/rename.vim'
  Plug 'qpkorr/vim-bufkill'
  Plug 'majutsushi/tagbar'
call plug#end()

" Statusline
set statusline=
set statusline+=[%n]\                                  "buffernr
set statusline+=%<%F\                                  "File+path
set statusline+=%m%r%w\                                "Modified? Readonly? 
set statusline+=c:%c\                                  "Colnr
set statusline+=%P\                                    "Top/bot.

runtime macros/matchit.vim

filetype plugin on
filetype plugin indent on

syntax enable

colorscheme monokai

" Status line colors
hi StatusLine ctermbg=147 ctermfg=232
hi StatusLineNC ctermbg=18 ctermfg=16

" remove netrw directory banner
let g:netrw_banner = 0

" (Plugin python-syntax) 
let g:python_highlight_all = 1

" (Plugin fzf) Disable jumping to existing windows
let g:fzf_buffers_jump = 0

" (Plugin tagbar)
let g:tagbar_width = 25
let g:tagbar_compact = 1
let g:tagbar_indent = 1
let g:tagbar_sort = 0


"""""""""""""""""""""""""""""""""""
"           Functions
"

" Show git diff of current file
function GitDiff()
    :silent execute '!git diff --color=always -- ' . expand('%:p') . ' | less --RAW-CONTROL-CHARS'
    :redraw!
endfunction
command! -bar GitDiff call GitDiff()
function GitDiffStaged()
    :silent execute '!git diff --staged --color=always -- ' . expand('%:p') . ' | less --RAW-CONTROL-CHARS'
    :redraw!
endfunction
command! -bar GitDiffStaged call GitDiffStaged()

" Toggle fold column
function ToggleFoldColumn()
    if (&foldcolumn != 0)
        set foldcolumn=0
    else
        set foldcolumn=2
    endif
endfunction
command! -bar ToggleFoldColumn call ToggleFoldColumn()


function ToggleSetList()
  if !exists('s:setlist') || s:setlist == 0
    set listchars=space:·,tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:·,eol:$
    let s:setlist = 1
  else
    set listchars=extends:›,precedes:‹
    let s:setlist = 0
  endif
endfunction
command! -bar ToggleSetList call ToggleSetList()

function ToggleStatusLine()
  if !exists('s:statusline') || s:statusline == 0
    set statusline=
    "set statusline+=[%n]\                                  "buffernr
    set statusline+=%<%F\                                  "File+path
    set statusline+=%m%r%w\                                "Modified? Readonly? 
    set statusline+=%=%y\                                  "FileType
    set statusline+=%{''.(&fenc!=''?&fenc:&enc).''}        "Encoding
    set statusline+=%{(&bomb?\",BOM\":\"\")}\              "Encoding2
    set statusline+=%{&ff}\                                "FileFormat (dos/unix..) 
    set statusline+=r:%l/%L\                               "Rownumber/total (%)
    set statusline+=c:%c\                                  "Colnr
    set statusline+=%P\                                    "Top/bot.

    let s:statusline = 1
  else
    set statusline=
    "set statusline+=[%n]\                                  "buffernr
    set statusline+=%<%F\                                  "File+path
    set statusline+=%m%r%w\                                "Modified? Readonly? 
    set statusline+=%=c:%c\                                "Colnr
    set statusline+=%P\                                    "Top/bot.

    let s:statusline = 0
  endif
endfunction
command! -bar ToggleStatusLine call ToggleStatusLine()

" Toggles between manual and syntax folding
function ToggleFoldMethod()
  if (&foldmethod == 'manual')
    setlocal foldmethod=syntax
    echo 'foldmethod=syntax'
  else
    setlocal foldmethod=manual
    echo 'foldmethod=manual'
  endif
endfunction
command! -bar ToggleFoldMethod call ToggleFoldMethod()

" Echo File/dir paths
function EchoRelativeFilePath()
    echo @%
endfunction
command! -bar EchoRelativeFilePath call EchoRelativeFilePath()
function EchoFileName()
    echo expand('%:t')
endfunction
command! -bar EchoFileName call EchoFileName()
function EchoFullFilePath()
    echo expand("%:p")
endfunction
command! -bar EchoFullFilePath call EchoFullFilePath()
function EchoDirName()
    echo expand('%:p:h:t')
endfunction
command! -bar EchoDirName call EchoDirName()
function EchoFullDirPath()
    echo expand('%:p:h')
endfunction
command! -bar EchoFullDirPath call EchoFullDirPath()

function FzfFiles()
    let isgitrepo = system('git rev-parse --is-inside-work-tree 2>/dev/null 1>/dev/null && echo -n "true" || echo -n "false"')
    if isgitrepo == 'true'
        :GFiles
    else
        :Files
    endif
endfunction
command! -bar FzfFiles call FzfFiles()

" See https://vim.fandom.com/wiki/Make_search_results_appear_in_the_middle_of_the_screen
function s:SearchMode()
  if !exists('s:searchmode') || s:searchmode == 0
    echo 'Search next: scroll hit to middle if not on same page'
    nnoremap <silent> n n:call <SID>MaybeMiddle()<CR>
    nnoremap <silent> N N:call <SID>MaybeMiddle()<CR>
    let s:searchmode = 1
  elseif s:searchmode == 1
    echo 'Search next: scroll hit to middle'
    nnoremap n nzz
    nnoremap N Nzz
    let s:searchmode = 2
  else
    echo 'Search next: normal'
    nunmap n
    nunmap N
    let s:searchmode = 0
  endif
endfunction
" If cursor is in first or last line of window, scroll to middle line.
function s:MaybeMiddle()
  if winline() == 1 || winline() == winheight(0)
    normal! zz
  endif
endfunction

" Compatible with ranger 1.4.2 through 1.7.*
"
" Add ranger as a file chooser in vim.
" Starts in the current file's directory.
" Usage: :RangerChooser
function! RangerChooser()
    let temp = tempname()
    " The option "--choosefiles" was added in ranger 1.5.1. Use the next line
    " with ranger 1.4.2 through 1.5.0 instead.
    "exec 'silent !ranger --choosefile=' . shellescape(temp)
    if has("gui_running")
        exec 'silent !xterm -e ranger --choosefiles=' . shellescape(temp) . ' ' . expand('%:p:h')
    else
        exec 'silent !ranger --choosefiles=' . shellescape(temp) . ' ' . expand('%:p:h') 
    endif
    if !filereadable(temp)
        redraw!
        " Nothing to read.
        return
    endif
    let names = readfile(temp)
    if empty(names)
        redraw!
        " Nothing to open.
        return
    endif
    " Edit the first item.
    exec 'edit ' . fnameescape(names[0])
    " Add any remaning items to the arg list/buffer list.
    for name in names[1:]
        exec 'argadd ' . fnameescape(name)
    endfor
    redraw!
endfunction
command! -bar R call RangerChooser()

"""""""""""""""""""""""""""""""""""
"           Auto commands
"

" Uncomment the following to have Vim jump to the last position when                                                       
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif

" Filetype-specific
autocmd FileType html,htmldjango setlocal tabstop=2 shiftwidth=2


"""""""""""""""""""""""""""""""""""
"           Mappings
"

nmap <leader>p :set paste<CR>"+p:set paste!<CR>
vmap <leader>p :set paste<CR>"+p:set paste!<CR>
nmap <leader>P :set paste<CR>"+P:set paste!<CR>
vmap <leader>P :set paste<CR>"+P:set paste!<CR>
nmap <leader>yy v^$"+y
vmap <leader>y "+y

nmap <silent> <F1> :noh<CR>
nmap <silent> <F3> :set wrap!<CR>
nmap <silent> <F4> :TagbarToggle<CR>
nmap <C-b> :Buffers<CR>
nmap <C-e> :FzfFiles<CR>
nmap <C-n> :Files<CR>
nmap <C-f> :History:<CR>
nmap <C-t> :Tags<CR>
nmap <C-g> :History<CR>
nmap <C-p> :w<CR>
nmap <C-q> :BD<CR>

" See https://vim.fandom.com/wiki/Move_cursor_by_display_lines_when_wrapping
nnoremap j gj
vnoremap j gj
nnoremap k gk
vnoremap k gk

" See https://vim.fandom.com/wiki/Selecting_your_pasted_text
nnoremap <expr> gp "'[" . strpart(getregtype(), 0, 1) . "']"
nnoremap <expr> gP "`[" . strpart(getregtype(), 0, 1) . "`]"
" Switch between search modes
nnoremap <silent> <leader>n :call <SID>SearchMode()<CR>

nmap <c-j> gj
vmap <c-j> gj
nmap <c-k> gk
vmap <c-k> gk

vmap $ $h
